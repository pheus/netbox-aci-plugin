---
# see:
# Packaging guide (GitHub Actions):
# https://packaging.python.org/en/latest/guides/\
# publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/
name: Publish Python üêç distribution üì¶

on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - "v*"

# least privilege by default; jobs escalate as needed
permissions:
  contents: read

# avoid overlapping publishes if tags are pushed rapidly
concurrency:
  group: publish-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build distribution üì¶
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository üß©
        uses: actions/checkout@v4
      - name: Set up Python üêç
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
      - name: Install pypa/build üèóÔ∏è
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade build twine
      - name: Build wheel and sdist üì¶
        run: |
          python -m build
      - name: Validate metadata
        run: |
          twine check dist/*
      - name: Upload the distribution packages üì¶
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
          retention-days: 7

  check-version:
    name: Check project versioning üè∑Ô∏è
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository üß©
        uses: actions/checkout@v4
      - name: Set up Python üêç
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
      - name: Extract version from pyproject.toml and set as env variable üìù
        run: |
          PYPROJECT_VERSION=$(python -c "import tomllib; \
            f = open('pyproject.toml', 'rb'); data = tomllib.load(f); \
            print(data['project']['version']); f.close()")
          echo "PACKAGE_VERSION=$PYPROJECT_VERSION" >> $GITHUB_ENV
        shell: bash
      - name: Check if project version matches the git tag üè∑Ô∏è
        run: |
          TAG=$(git describe HEAD --tags --abbrev=0 | sed 's/^v//')
          echo "Tag (without 'v'): $TAG"
          echo "Package version: $PACKAGE_VERSION"
          if [[ "$TAG" != "$PACKAGE_VERSION" ]]; then
            echo "Error: Tag does not match the package version."
            exit 1
          fi

  github-release:
    name: Prepare GitHub release üöÄ
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - check-version
    permissions:
      contents: write
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository üß©
        uses: actions/checkout@v4
      - name: Capture version from tag üìù
        run: |
          TAG=$(git describe HEAD --tags --abbrev=0 | sed 's/^v//')
          echo "PACKAGE_VERSION=$TAG" >> "$GITHUB_ENV"
      - name: Download dists üì¶
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Build release notes from CHANGELOG üìù
        run: |
          set -e
          VERSION="${{ env.PACKAGE_VERSION }}"
          # include the matching header and lines until the next '## [...]'
          awk "/^## \\[?${VERSION}\\]?/ {print; flag=1; next} \
          /^## \\[/ && flag {exit} flag" CHANGELOG.md > RELEASE.md
          # fallback if section not found or file empty
          if ! [ -s RELEASE.md ]; then
            {
              echo "## ${VERSION}"
              echo
              echo "_No changelog entry found for this tag._"
            } > RELEASE.md
          fi
      - name: Create draft release üöÄ
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body_path: ${{ github.workspace }}/RELEASE.md
          draft: true
          # mark prereleases automatically for a*, b*, rc* tags (optional)
          prerelease: >-
            ${{ contains(env.PACKAGE_VERSION, 'a')
                || contains(env.PACKAGE_VERSION, 'b')
                || contains(env.PACKAGE_VERSION, 'rc') }}
          files: |
            dist/*.whl
            dist/*.tar.gz

  publish-to-pypi:
    name: Publish distribution üì¶ to PyPI
    if: startsWith(github.ref, 'refs/tags/')  # only publish on tag pushes
    needs:
      - check-version
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/netbox-aci-plugin
    # mandatory for trusted publishing (OIDC)
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download dists üì¶
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish to PyPI üêç
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          skip-existing: true
...
